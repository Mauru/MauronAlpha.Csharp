using System;

using MauronAlpha.Events.Units;

namespace MauronAlpha.Events {
	
	//The time of the active computer
	public sealed class SystemTime : MauronCode_eventClock {
		
		#region singleton
		private static volatile SystemTime instance=new SystemTime();
		private static object syncRoot=new Object();
		//constructor singleton multithread safe
		static SystemTime ( ) { }
		public static SystemTime Instance {
			get {
				if( instance==null ) {
					lock( syncRoot ) {
						
						//perform configuration here
						instance=new SystemTime();


						instance.SetAsSystemTime();

					}

				}
				return instance;
			}
		}

		//Is this clock the System Time
		public override bool IsSystemTime { get { return true; } }
		public new static MauronCode_timeUnit Time { 
			get {
				return new MauronCode_timeUnit(System.DateTime.Now.Ticks, Instance);
			}
		}
		public new static MauronCode_timeStamp TimeStamp { 
			get {
				return new MauronCode_timeStamp( Instance , Time);
			}
		}

		#endregion
	
	}

}
