
		//Name
		protected string str_name;
		public virtual string Name {
			get {
				if(str_name==null){
					throw new GameCodeError("No Name defined!",this);
				}
				return str_name;
			}
			set {
				str_name=value;
			}
		}

			//The type of Drawable
		public readonly DrawableType DrawableType;

		
		//constructor
		public Drawable(DrawableType dtype) {
			DrawableType=dtype;
		}

		#region Handling DrawEvents

		//Tell the drawParent to redraw
		public virtual void SheduleRender() {
			if(GameDrawData==null){
				throw new GameCodeError("Drawable has not been initialized yet (no GameDrawData)", this);
			}

			// Item has been rendered, but might need an update
			if(GameDrawData.Rendered
				&& GameDrawData.LastRenderedAt > GameTick.START
				&& GameDrawData.LastRenderedAt < GameTick.NOW
			) {
				
			}

			Debug("A Redraw is being sheduled by "+Name,this);

			//A Redraw is sheduled and a parent's redraw is also sheduled
			if(B_sheduled&&DrawParent.RedrawSheduled) { 
				MauronCode.Debug("warning, duplicate Drawcall!", this);
			}

			//Does the Item have any children?
			if(IsDrawParent) {
				
				//yes but it is allready sheduled, do nothing
				if(B_sheduled) {
					Debug("Redraw was allready sheduled, doing nothing", this);
					return;
				}

				//
				DrawBuffer.Add(this);
				return;

			}

			if( D_drawParent==null ) {
				Debug("Attempting to find the drawParent",this);
				D_drawParent=FindDrawParent();
			}

			D_drawParent.SheduleRedraw();
		}

		//Find the first parent that is a drawparent (i.e. a drawlayer or stage)
		public virtual bool IsDrawParent { get {
			return DrawableType.IsDrawParent;
		} }
		protected Drawable D_drawParent=null;
		public virtual Drawable DrawParent{ 
			get { 
				if(D_drawParent==null){	FindDrawParent();	}
				return D_drawParent;
			}
		}
		public virtual Drawable FindDrawParent() {
			if(IsDrawParent){
				Debug("You are the drawparent!",this);
				D_drawParent=this;
				return this;
			}
			if(Parent==null) {
				throw new GameCodeError("No Parent set for object!", this);
			}
			D_drawParent=Parent.DrawParent;
			if(D_drawParent==null){
				throw new GameCodeError("Drawparent search fucked up!", this);
			}
			return D_drawParent;
		}
		
		//Data that stores draw events and results
		protected GameDrawData GDG_gameDrawData=null;
		public GameDrawData GameDrawData { 
			get {
				Debug("GameDrawdata being retieved by External", this);
				return GDG_gameDrawData;
			}
			set {
				//Game DrawData is being set by external
				Debug("GameDrawdata being set by External",this);
				if(value==null) {
					throw new GameCodeError("GameDrawData can't be null", this);
				}
				GDG_gameDrawData=value;
			}
		}

		//The item has rendered, reset the size
		public abstract void E_HasRendered();

#endregion

#region Position, Scale and Visibility

		//Size
		protected double D_width = 0;
		public abstract double Width { get;set; }
		protected double D_height = 0;
		public abstract double Height { get;set; }

		//LOCAL Position relative to the parent
		protected Vector2d v_position=new Vector2d();
		public virtual Vector2d Position {
			get {
				return v_position;
			}
			set {
				v_position=Position;
			}
		}

		//Is the item hidden?
		protected bool B_visible=true;
		public virtual bool Visible {
			get {
				return B_visible;
			}
			set {
				B_visible=value;
			}
		}
		
#endregion

#region Parents

		//Parents		
		protected Drawable D_parent=null;
		public virtual Drawable Parent {
			get {
				return D_parent;
			}
			set {
				if( D_parent!=null ) {
					return;
				}
				D_parent=value;
			}
		}

#endregion

#region Children
		private Dictionary<int, Drawable> D_childrenByHash=new Dictionary<int, Drawable>();
		private Dictionary<int, int> D_indexByChildHash=new Dictionary<int, int>();
		protected Dictionary<string, int[]> D_childHashesByName=new Dictionary<string, int[]>();

		public virtual Stack<Drawable> Children {
			get {
				Drawable[] A_children=new Drawable[D_childrenByHash.Values.Count];
				D_childrenByHash.Values.CopyTo(A_children, 0);
				return new Stack<Drawable>(A_children);
			}
		}
		public virtual void AddChild (Drawable child) {
			int hash=child.GetHashCode();
			D_childrenByHash[hash]=child;
		}
		public virtual void RemoveChild (Drawable child) {

		}
#endregion

		//Return all Textures used by this component
		protected Stack<Drawable_texture> A_textures=new Stack<Drawable_texture>();
		public virtual Drawable_texture[] Textures {
			get {
				return A_textures.ToArray();
			}
		}

#region Shortcuts

		public virtual DrawBuffer DrawBuffer {
			get { return DrawBuffer.Instance; }
		}
		public virtual GameTextureManager TextureManager {
			get { return GameTextureManager.Instance; }
		}
		public virtual GameAssetManager GameAssetManager {
			get { return GameAssetManager.Instance; }
		}

#endregion
