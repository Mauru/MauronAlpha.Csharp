<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 12.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="12.0">
 <Targets>
  <Target Name="C:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\bin\Debug\MauronAlpha.dll">
   <Modules>
    <Module Name="mauronalpha.dll">
     <Namespaces>
      <Namespace Name="MauronAlpha.HandlingData">
       <Types>
        <Type Name="DataMap_enumerator`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'DataMap_enumerator&lt;TValue&gt;' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Current" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Current()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataMap.cs" Line="197">'DataMap_enumerator&lt;TValue&gt;.Current.get()' creates an exception of type 'MauronCode_error', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataMap.cs" Line="202">Modify 'DataMap_enumerator&lt;TValue&gt;.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ENUMERATE_MauronCode_dataSortIntList`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'ENUMERATE_MauronCode_dataSortIntList&lt;T_value&gt;' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataSortIntList.cs" Line="120">Modify 'ENUMERATE_MauronCode_dataSortIntList&lt;T_value&gt;.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Enumerator_dataIndex`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'Enumerator_dataIndex&lt;TValue&gt;' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataIndex.cs" Line="296">Modify 'Enumerator_dataIndex&lt;TValue&gt;.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Enumerator_dataTree`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'Enumerator_dataTree&lt;TKey, TValue&gt;' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataTree.cs" Line="632">Modify 'Enumerator_dataTree&lt;TKey, TValue&gt;.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MauronCode_dataDictionary" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.String,System.Collections.Generic.KeyValuePair`2&lt;System.Object,System.Type&gt;&gt;&gt;.Add(System.Collections.Generic.KeyValuePair`2&lt;System.String,System.Collections.Generic.KeyValuePair`2&lt;System.Object,System.Type&gt;&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="Mauroncode_dataDictionary.cs" Line="189">Make 'MauronCode_dataDictionary' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;KeyValuePair&lt;string, KeyValuePair&lt;object, Type&gt;&gt;&gt;.Add(KeyValuePair&lt;string, KeyValuePair&lt;object, Type&gt;&gt;)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.String,System.Collections.Generic.KeyValuePair`2&lt;System.Object,System.Type&gt;&gt;&gt;.CopyTo(System.Collections.Generic.KeyValuePair`2&lt;System.String,System.Collections.Generic.KeyValuePair`2&lt;System.Object,System.Type&gt;&gt;[],System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="Mauroncode_dataDictionary.cs" Line="314">Make 'MauronCode_dataDictionary' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;KeyValuePair&lt;string, KeyValuePair&lt;object, Type&gt;&gt;&gt;.CopyTo(KeyValuePair&lt;string, KeyValuePair&lt;object, Type&gt;&gt;[], int)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IDictionary`2&lt;System.String,System.Collections.Generic.KeyValuePair`2&lt;System.Object,System.Type&gt;&gt;.Add(System.String,System.Collections.Generic.KeyValuePair`2&lt;System.Object,System.Type&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="Mauroncode_dataDictionary.cs" Line="186">Make 'MauronCode_dataDictionary' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDictionary&lt;string, KeyValuePair&lt;object, Type&gt;&gt;.Add(string, KeyValuePair&lt;object, Type&gt;)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IDictionary`2&lt;System.String,System.Collections.Generic.KeyValuePair`2&lt;System.Object,System.Type&gt;&gt;.Item[System.String]" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.Generic.IDictionary`2&lt;System.String,System.Collections.Generic.KeyValuePair`2&lt;System.Object,System.Type&gt;&gt;.get_Item(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="Mauroncode_dataDictionary.cs" Line="254">Make 'MauronCode_dataDictionary' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDictionary&lt;string, KeyValuePair&lt;object, Type&gt;&gt;.this.get(string)' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#System.Collections.Generic.IDictionary`2&lt;System.String,System.Collections.Generic.KeyValuePair`2&lt;System.Object,System.Type&gt;&gt;.set_Item(System.String,System.Collections.Generic.KeyValuePair`2&lt;System.Object,System.Type&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="Mauroncode_dataDictionary.cs" Line="257">Make 'MauronCode_dataDictionary' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDictionary&lt;string, KeyValuePair&lt;object, Type&gt;&gt;.this.set(string, KeyValuePair&lt;object, Type&gt;)' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.Generic.IDictionary`2&lt;System.String,System.Collections.Generic.KeyValuePair`2&lt;System.Object,System.Type&gt;&gt;.TryGetValue(System.String,System.Collections.Generic.KeyValuePair`2&lt;System.Object,System.Type&gt;&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="Mauroncode_dataDictionary.cs" Line="236">Make 'MauronCode_dataDictionary' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDictionary&lt;string, KeyValuePair&lt;object, Type&gt;&gt;.TryGetValue(string, out KeyValuePair&lt;object, Type&gt;)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;System.String,System.Collections.Generic.KeyValuePair`2&lt;System.Object,System.Type&gt;&gt;&gt;.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="Mauroncode_dataDictionary.cs" Line="336">Make 'MauronCode_dataDictionary' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable&lt;KeyValuePair&lt;string, KeyValuePair&lt;object, Type&gt;&gt;&gt;.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IEnumerable.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="Mauroncode_dataDictionary.cs" Line="339">Make 'MauronCode_dataDictionary' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MauronCode_dataIndex`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;!0&gt;.Add(!0)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataIndex.cs" Line="230">Make 'MauronCode_dataIndex&lt;T&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;T&gt;.Add(T)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;!0&gt;.Contains(!0)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataIndex.cs" Line="244">Make 'MauronCode_dataIndex&lt;T&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;T&gt;.Contains(T)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;!0&gt;.CopyTo(!0[],System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataIndex.cs" Line="236">Make 'MauronCode_dataIndex&lt;T&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;T&gt;.CopyTo(T[], int)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;!0&gt;.Count" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.Generic.ICollection`1&lt;!0&gt;.get_Count()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataIndex.cs" Line="253">Make 'MauronCode_dataIndex&lt;T&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;T&gt;.Count.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;!0&gt;.Remove(!0)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataIndex.cs" Line="247">Make 'MauronCode_dataIndex&lt;T&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;T&gt;.Remove(T)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MauronCode_dataList`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;!0&gt;.Contains(!0)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataList.cs" Line="566">Make 'MauronCode_dataList&lt;T&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;T&gt;.Contains(T)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;!0&gt;.Remove(!0)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataList.cs" Line="561">Make 'MauronCode_dataList&lt;T&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;T&gt;.Remove(T)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IEnumerable`1&lt;!0&gt;.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataList.cs" Line="576">Make 'MauronCode_dataList&lt;T&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable&lt;T&gt;.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IList`1&lt;!0&gt;.Insert(System.Int32,!0)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataList.cs" Line="584">Make 'MauronCode_dataList&lt;T&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IList&lt;T&gt;.Insert(int, T)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IList`1&lt;!0&gt;.Item[System.Int32]" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.Generic.IList`1&lt;!0&gt;.set_Item(System.Int32,!0)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataList.cs" Line="599">Make 'MauronCode_dataList&lt;T&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IList&lt;T&gt;.this.set(int, T)' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.Generic.IList`1&lt;!0&gt;.RemoveAt(System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataList.cs" Line="590">Make 'MauronCode_dataList&lt;T&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IList&lt;T&gt;.RemoveAt(int)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IEnumerable.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataList.cs" Line="579">Make 'MauronCode_dataList&lt;T&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MauronCode_dataReference`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;&gt;.Add(System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataReference.cs" Line="138">Make 'MauronCode_dataReference&lt;TKey, TValue&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;.Add(KeyValuePair&lt;TKey, TValue&gt;)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;&gt;.Clear()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataReference.cs" Line="142">Make 'MauronCode_dataReference&lt;TKey, TValue&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;.Clear()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;&gt;.Contains(System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataReference.cs" Line="146">Make 'MauronCode_dataReference&lt;TKey, TValue&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;.Contains(KeyValuePair&lt;TKey, TValue&gt;)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;&gt;.CopyTo(System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;[],System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataReference.cs" Line="155">Make 'MauronCode_dataReference&lt;TKey, TValue&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;.CopyTo(KeyValuePair&lt;TKey, TValue&gt;[], int)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.ICollection`1&lt;System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;&gt;.Remove(System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataReference.cs" Line="172">Make 'MauronCode_dataReference&lt;TKey, TValue&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICollection&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;.Remove(KeyValuePair&lt;TKey, TValue&gt;)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IDictionary`2&lt;!0,!1&gt;.Add(!0,!1)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataReference.cs" Line="103">Make 'MauronCode_dataReference&lt;TKey, TValue&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDictionary&lt;TKey, TValue&gt;.Add(TKey, TValue)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IDictionary`2&lt;!0,!1&gt;.Item[!0]" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.Generic.IDictionary`2&lt;!0,!1&gt;.get_Item(!0)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataReference.cs" Line="130">Make 'MauronCode_dataReference&lt;TKey, TValue&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDictionary&lt;TKey, TValue&gt;.this.get(TKey)' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#System.Collections.Generic.IDictionary`2&lt;!0,!1&gt;.set_Item(!0,!1)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataReference.cs" Line="133">Make 'MauronCode_dataReference&lt;TKey, TValue&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDictionary&lt;TKey, TValue&gt;.this.set(TKey, TValue)' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.Generic.IDictionary`2&lt;!0,!1&gt;.Remove(!0)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataReference.cs" Line="117">Make 'MauronCode_dataReference&lt;TKey, TValue&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDictionary&lt;TKey, TValue&gt;.Remove(TKey)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IDictionary`2&lt;!0,!1&gt;.TryGetValue(!0,!1&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataReference.cs" Line="121">Make 'MauronCode_dataReference&lt;TKey, TValue&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDictionary&lt;TKey, TValue&gt;.TryGetValue(TKey, out TValue)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IEnumerable`1&lt;System.Collections.Generic.KeyValuePair`2&lt;!0,!1&gt;&gt;.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataReference.cs" Line="179">Make 'MauronCode_dataReference&lt;TKey, TValue&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IEnumerable.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataReference.cs" Line="183">Make 'MauronCode_dataReference&lt;TKey, TValue&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MauronCode_dataTree`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#System.ICloneable.Clone()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingData" File="MauronCode_dataTree.cs" Line="592">Make 'MauronCode_dataTree&lt;TKey, TValue&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ICloneable.Clone()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="MauronAlpha.HandlingErrors">
       <Types>
        <Type Name="MauronCode_error" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'MauronCode_error' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Instance" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Instance()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="c:\Users\mauru\Desktop\Coding\mauronAlpha.cSharp\MauronAlpha\HandlingErrors" File="MauronCode_error.cs" Line="53">'MauronCode_error.Instance.get()' creates an exception of type 'MauronCode_error', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="MauronCode_exception" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2016-10-30 10:52:29Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'MauronCode_exception' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065">
   <Name>Do not raise exceptions in unexpected locations</Name>
   <Description>Do not explicitly raise exceptions from unexpected locations. There are some methods, such as Equals and GetHashCode, which users do not expect to raise exceptions. Therefore calls to these methods are not commonly wrapped in try catch blocks.</Description>
   <Resolution Name="PropertyGetter">{0} creates an exception of type {1}, an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386039.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error, Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
   <Name>Implement IDisposable correctly</Name>
   <Description>All IDisposable types should implement the Dispose pattern correctly.</Description>
   <Resolution Name="DisposeImplementation">Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Resolution>
   <Resolution Name="ProvideDisposeBool">Provide an overridable implementation of Dispose(bool) on {0} or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms244737.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033">
   <Name>Interface methods should be callable by child types</Name>
   <Description>Explicit method implementations are defined with private accessibility. Classes that derive from classes with explicit method implementations and choose to re-declare them on the class will not be able to call into the base class implementation unless the base class has provided an alternate method with appropriate accessibility. When overriding a base class method that has been hidden by explicit interface implementation, in order to call into the base class implementation, a derived class must cast the base pointer to the relevant interface. When calling through this reference, however, the derived class implementation will actually be invoked, resulting in recursion and an eventual stack overflow.</Description>
   <Resolution Name="Default">Make {0} sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of {1} and is visible to derived classes.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182153.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
   <Name>Mark ISerializable types with SerializableAttribute</Name>
   <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
   <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182350.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
